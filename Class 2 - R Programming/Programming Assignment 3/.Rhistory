find.package("devtools")
install.packages("devtools")
library(devtools)
library("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth R")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages("swirl")
library("swirl")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1:20
pi:10
15:1
?":"
seq(1,10)
seq(1, 20)
seq(1, 10, by=0.5)
seq(0, 10, by=0.5)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(me_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_charc("My","name","is")
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char, "Nicholas")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
num_vect(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collpase=" ")
paste(my_char,collapse=" ")
my_name<-c(my_char,"Nicholas")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<rnorm(1000)
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
0
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo,"bar",norf")
names(vect2)<-c("foo,"bar","norf")
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector<-c(4,5))
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(data=1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
install_from_swirl("Data Analysis")
swirl()
cars
cars$mpgCity
myMPG<-cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
range(cars$price)
61.9-7.4
var(cars$price)
sd(cars$price)
20
10
25
4
summary(cars$price)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- 1:10
if(x > 5) {
x <- 0
}
install.packages("wordcloud")
?debug
m<-matrix(1:4,2,2)
class(m)
?solve
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(m)
cacheSolve(m)
m <- makeCacheMatrix(m)
n<-matrix(1:4,2,2)
cacheSolve(m)
M<-makeCacheMatrix(1:4,2,2)
M<-makeCacheMatrix(1:4)
M
cacheSolve(M)
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
m<-matrix(1:4,2,2)
n<-makeCacheMatrix(m)
cacheSolve(n)
solve(m)
cacheSolve(n)
g<-makeCacheMatrix(m)
cacheSolve(g)
cacheSolve(n)
set.seed(1)
rpois(5,2)
setwd("~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[,11]
outcome[,11]<-as.numeric(outcome[,11])
hist(outcome[,11])
is.character("123")
outcome[,7].name
outcome[,7]
outcome[1,7]
?or
len("al")
length("al")
?len
??len
str_length("al")
library("stringr")
str_length("al")
state<-unique(outcome[,7])
?match
"BB" %in% state
"AL" %in% state
"al" %in% state
?upper
?toupper
toupper("al") %in% state
toupper("12")
?stop
stop("invalid state")
?min
?order
subset<-outcome[["State"]=="AL"]
subset<-outcome[["State"=="AL"]]
subset<-outcome[State=="AL"]
outcome[["State"]]
outcome.sub <- subset(outcome, State == "AL")
order(outcome.sub[,11])
?names
names(outcome)[7]
outcome.sub <- NULL
outcome.sub <- subset(outcome, names(outcome)[7]=="AL")
outcome.sub <- subset(outcome, outcome[,7]=="AL")
outcome.sub <- subset(outcome, State == "AL")
?match
outcome.sub[1,2]
outcome.sub <- outcome.sub[order(outcome.sub[, 2]), ]
outcome.sub[1,2]
outcome.sub <- outcome.sub[order(-outcome.sub[, 2]), ]
?return
source('~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3/best.R')
source('~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3/best.R')
best("AL", "heart failure")
valid.outcomes <- c("heart attack", "heart failure", "pneumonia")
match("heart failure", valid.outcomes)
source('~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3/best.R')
best("AL", "heart failure")
source('~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3/best.R')
best("AL", "heart failure")
outcome.sub <- transform(outcome.sub, outcome.sub[, 11] = as.numeric(outcome.sub[, 11]))
?transform
source('~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3/best.R')
best("TX", "heart attack")
best("TX", "heart attack")
outcome <- read.csv("outcome-of-care-measures.csv")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
best("TX", "heart failure")
source('~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3/best.R')
best("TX", "heart failure")
best("TX", "heart attack")
best("MD", "heart attack")
best("MD", "pneumonia")
order
?order
source('~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3/best.R')
best("MD", "pneumonia")
best("MD", "heart attack")
source('~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3/best.R')
best("TX", "heart attack")
best("TX", "heart failure")
source('~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3/best.R')
best("TX", "heart failure")
best("TX", "heart attack")
best("NY", "hert attack")
best("BB", "heart attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
is.numeric(7)
nrows(outcome.sub)
nrow(outcome.sub)
source('~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3/rankhospital.R')
source('~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
submit()
submit()
submit()
submit()
len(state)
length(state)
?data.frame
lol <- data.frame(hospital,state)
lol <- data.frame("hospital","state")
lol <- data.frame(hospital = NULL, state = NULL)
lol
names(lol)
rbind(lol, c("lol","lol"))
lol<-rbind(lol, c("lol","lol"))
names(lol)<-c("hospital","state")
lol<-data.frame
lol<-data.frame(NULL)
names(lol)<-c("hospital","state")
lol <- data.frame(hospital = 1, state = 2)
source('~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3/rankall.R')
head(rankall("heart attack", 20), 10)
state<-state[order(state)]
source('~/GitHub/datasciencecoursera/Class 2 - R Programming/Programming Assignment 3/rankall.R')
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
